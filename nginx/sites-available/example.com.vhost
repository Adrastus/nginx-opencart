server {
  listen 80;
  server_name example.com;
  return 301 $scheme://www.example.com$request_uri;
}

server {
  listen 80; # listen for ipv4; this line is default and implied
  #listen [::]:80 default ipv6only=on; ## listen for ipv6
  #listen [::]:443 ipv6only=off ssl;
  server_name www.example.com;
  #ssl_certificate /srv/www/example.com/ssl/www.example.com.crt;
  #ssl_certificate_key /srv/www/example.com/ssl/www.example.com.key;

  root /srv/www/example.com/htdocs;
  index index.php index.html index.htm;
  charset UTF-8;
  autoindex off;

  # Show "Not Found" 404 errors in place of "Forbidden" 403 errors, because
  # forbidden errors allow attackers potential insight into your server's
  # layout and contents
  error_page 403 =404;

  # It's always good to set logs, note however you cannot turn off the error log
  # setting error_log off; will simply create a file called 'off'.
  access_log /var/log/nginx/example.com.access.log;
  error_log /var/log/nginx/example.com.error.log;

  # Add trailing slash to */admin requests.
  rewrite /admin$ $scheme://$host$uri/ permanent;

  location / {
    # This try_files directive is used to enable SEO-friendly URLs
    # for OpenCart.
    try_files $uri @opencart;
  }

  location @opencart {
    rewrite ^/(.+)$ /index.php?_route_=$1 last;
  }

  location /admin {
    index index.php;
  }

  # Make sure files with the following extensions do not get loaded by nginx because nginx would display the source code, and these files can contain PASSWORDS!
  location ~* \.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)$|^(\..*|Entries.*|Repository|Root|Tag|Template)$|\.php_ {
    deny all;
  }

  # Option to create password protected directory
  # http://www.howtoforge.com/basic-http-authentication-with-nginx
  # location /admin {
  #   auth_basic "Administrator Login";
  #   auth_basic_user_file /var/www/domain.com/admin/.htpasswd;
  # }

  # Do not log access to these to keep the logs cleaner
  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }

  location = /apple-touch-icon.png {
    log_not_found off;
    access_log off;
  }

  location = /apple-touch-icon-precomposed.png {
    log_not_found off;
    access_log off;
  }

  # This block will catch static file requests, such as images, css, js
  # The ?: prefix is a 'non-capturing' mark, meaning we do not require
  # the pattern to be captured into $1 which should help improve performance
  location ~* \.(?:3gp|gif|jpg|jpe?g|png|ico|wmv|avi|asf|asx|mpg|mpeg|mp4|pls|mp3|mid|wav|swf|flv|html|htm|txt|js|css|exe|zip|tar|rar|gz|tgz|bz2|uha|7z|doc|docx|xls|xlsx|pdf|iso|woff)$ {
    # Some basic cache-control for static files to be sent to the browser
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~ /\. {
    access_log off;
    log_not_found off;
    deny all;
  }

  location ~ ~$ {
    access_log off;
    log_not_found off;
    deny all;
  }

  # Deny access to any files with a .php extension in these directories
  # Works in sub-directory installs and also in multisite network
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)

  location /srv/www/example.com/htdocs/store/system/cache/ {
  location ~ .*\.(php\d*|cgi|pl|phtml)?$
  {
    deny all;
  }
  }

  location /srv/www/example.com/htdocs/store/system/logs/ {
  location ~ .*\.(php\d*|cgi|pl|phtml)?$
  {
    deny all;
  }
  }

  location /srv/www/example.com/htdocs/store/image/ {
  location ~ .*\.(php\d*|cgi|pl|phtml)?$
  {
    deny all;
  }
  }

  location /srv/www/example.com/htdocs/store/image/cache/ {
  location ~ .*\.(php\d*|cgi|pl|phtml)?$
  {
    deny all;
  }
  }

  location /srv/www/example.com/htdocs/store/download/ {
  location ~ .*\.(php\d*|cgi|pl|phtml)?$
  {
    deny all;
  }
  }

  # Make sure these get through
  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }

  rewrite ^/sitemap.xml$ /index.php?route=feed/google_sitemap last;
  rewrite ^/googlebase.xml$ /index.php?route=feed/google_base last;
  rewrite ^/download/(.*) /index.php?route=error/not_found last;

  # Fix for Firefox issue with cross site font icons
  location ~* \.(eot|otf|ttf|woff)$ {
    add_header Access-Control-Allow-Origin *;
  }

  #error_page 404 /404.html;

  # redirect server error pages to the static page /50x.html
  #
  #error_page 500 502 503 504 /50x.html;
  #location = /50x.html {
  #   root /usr/share/nginx/www;
  #}

  location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
    fastcgi_pass unix:/var/run/example.com.sock;
    fastcgi_index index.php;
    include fastcgi_params;
    }

  # Use this block if PHPMyAdmin is enabled for this domain
  location /phpmyadmin {
    root /usr/share/;
    index index.php index.html index.htm;

    location ~ ^/phpmyadmin/(.+\.php)$ {
      try_files $uri =404;
      root /usr/share/;
      fastcgi_pass unix:/var/run/example.com.sock;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      include /etc/nginx/fastcgi_params;
    }

    location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
      root /usr/share/;
    }
  }

  location /phpMyAdmin {
    rewrite ^/* /phpmyadmin last;
  }

} # End of server block.
